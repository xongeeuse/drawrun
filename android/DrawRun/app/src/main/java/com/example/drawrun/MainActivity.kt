package com.example.drawrun

import android.annotation.SuppressLint
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.LinearGradient
import android.graphics.Shader
import android.location.Geocoder
import android.location.Location
import android.os.Bundle
import android.util.Log
import android.widget.Button
import android.widget.TextView
import androidx.activity.enableEdgeToEdge
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import com.example.drawrun.ui.auth.LoginActivity
import com.example.drawrun.utils.SecureStorage
import org.json.JSONObject
import android.util.Base64
import android.widget.ImageView
import androidx.core.app.ActivityCompat
import com.example.drawrun.ui.common.BaseActivity
import com.example.drawrun.ui.map.MapActivity
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationServices
import java.util.Locale
import android.Manifest
import android.graphics.Color
import android.os.Build
import android.view.View
import android.view.WindowInsetsController
import androidx.core.content.res.ResourcesCompat
import androidx.lifecycle.lifecycleScope
import androidx.viewpager2.widget.ViewPager2
import com.example.drawrun.data.dto.response.search.CourseData
import com.example.drawrun.data.repository.SearchRepository
import com.example.drawrun.dto.course.PathPoint
import com.example.drawrun.ui.main.fragment.CoursePagerAdapter
import com.example.drawrun.ui.map.AiMapActivity
import com.example.drawrun.ui.navi.NaviActivity
import com.example.drawrun.utils.RetrofitInstance
import kotlinx.coroutines.launch

class MainActivity : BaseActivity() {

    private lateinit var btnLoginLogout: Button
    private lateinit var btnAICourse: ImageView
    private lateinit var btnCustomCourse: ImageView
    private lateinit var tvLocation: TextView
    private lateinit var tvRunNear: TextView
    override fun getLayoutId(): Int = R.layout.activity_main  // ‚úÖ Î†àÏù¥ÏïÑÏõÉ Î¶¨ÏÜåÏä§ ÏßÄÏ†ï

    // ÏúÑÏπò ..
    private lateinit var fusedLocationClient: FusedLocationProviderClient

    private lateinit var searchRepository: SearchRepository

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(R.layout.activity_main)
        LaunchAppMessageReceiver(this)
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            window.statusBarColor = Color.TRANSPARENT // ÏÉÅÌÉúÎ∞î Ìà¨Î™ÖÌïòÍ≤å ÎßåÎì§Í∏∞
            insets
        }
        // ÏÉÅÌÉúÎ∞î Î∞∞Í≤ΩÏùÑ Ìà¨Î™ÖÌïòÍ≤å ÏÑ§Ï†ï
        window.statusBarColor = Color.TRANSPARENT
        // ÏÉÅÌÉúÎ∞î ÏïÑÏù¥ÏΩòÏùÑ Ìù∞ÏÉâÏúºÎ°ú Î≥ÄÍ≤Ω (Android 11 Ïù¥ÏÉÅ)
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            window.insetsController?.setSystemBarsAppearance(
                0, // Ìù∞ÏÉâ Í∏ÄÏî® Ïú†ÏßÄ
                WindowInsetsController.APPEARANCE_LIGHT_STATUS_BARS
            )
        }

        val tvWelcomeMessage = findViewById<TextView>(R.id.tvWelcomeMessage)
        val customFont = ResourcesCompat.getFont(this, R.font.praise_regular)
        tvWelcomeMessage.typeface = customFont

        tvRunNear = findViewById(R.id.tvRunNear)
        applyGradientToText(tvRunNear)

        tvLocation = findViewById(R.id.tvLocation)

        val btnRegister = findViewById<Button>(R.id.btnRegister)
        btnLoginLogout = findViewById(R.id.btnLogin)

        // ‚úÖ Ï¥àÍ∏∞ Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏
        updateLoginState()

        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)
        checkAndRequestLocationPermission()

        // ‚úÖ UI ÏöîÏÜå Ï¥àÍ∏∞Ìôî
        tvLocation = findViewById(R.id.tvLocation)
        btnLoginLogout = findViewById(R.id.btnLogin)
        btnAICourse = findViewById(R.id.btnAICourse) // üîπ ImageViewÎ°ú ÏàòÏ†ï
        btnCustomCourse = findViewById(R.id.btnCustomCourse) // üîπ ImageViewÎ°ú ÏàòÏ†ï

        // ‚úÖ `RetrofitInstance`Î•º ÌÜµÌï¥ `SearchApi` Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± (context ÏÇ¨Ïö©)
        val searchApi = RetrofitInstance.SearchApi(this)

        // ‚úÖ `SearchRepository` Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
        searchRepository = SearchRepository(searchApi)


        // ‚úÖ Î°úÍ∑∏Ïù∏/Î°úÍ∑∏ÏïÑÏõÉ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
        btnLoginLogout.setOnClickListener {
            if (SecureStorage.getAccessToken(this) != null) {
                // Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨
                SecureStorage.clearAccessToken(this)
                Log.d("MainActivity", "Î°úÍ∑∏ÏïÑÏõÉ ÏôÑÎ£å")
            } else {
                // Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
                try {
                    val intent = Intent(this, LoginActivity::class.java)
                    startActivity(intent)
                } catch (e: Exception) {
                    Log.e("MainActivity", "Error starting LoginActivity", e)
                }
            }
            // ‚úÖ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
            updateLoginState()
        }


        // ‚úÖ AI ÏΩîÏä§ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
        btnAICourse.setOnClickListener {
            val accessToken = SecureStorage.getAccessToken(this)
            if (accessToken != null) {
                val intent = Intent(this, AiMapActivity::class.java)
                startActivity(intent)
            } else {
                val intent = Intent(this, LoginActivity::class.java)
                startActivity(intent)
            }
        }

        // ‚úÖ ÎÇòÎßåÏùò ÏΩîÏä§ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
        btnCustomCourse.setOnClickListener {
            val accessToken = SecureStorage.getAccessToken(this)
            if (accessToken != null) {
                val intent = Intent(this, MapActivity::class.java)
                startActivity(intent)
            } else {
                val intent = Intent(this, LoginActivity::class.java)
                startActivity(intent)
            }
        }



        // Ïù∏ÌÖêÌä∏Ïóê Ìè¨Ìï®Îêú Î©îÏãúÏßÄ Í≤ΩÎ°ú ÌôïÏù∏ (Ï∂îÍ∞Ä Í≤ÄÏ¶ù)
        intent?.extras?.let {
            Log.d("DrawRun", "MainActivity Ïù∏ÌÖêÌä∏ Îç∞Ïù¥ÌÑ∞: ${it.toString()}")
        }

    }

    override fun onResume() {
        super.onResume()
        updateLoginState()  // ‚úÖ Ïï°Ìã∞ÎπÑÌã∞Í∞Ä Îã§Ïãú Î≥¥Ïùº Îïå Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        getCurrentLocation()
    }

    // ‚úÖ Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
    private fun updateLoginState() {
        val accessToken = SecureStorage.getAccessToken(this)
        val isLoggedIn = accessToken != null

        if (isLoggedIn) {
            btnLoginLogout.text = "Î°úÍ∑∏ÏïÑÏõÉ"
            val username = parseUsernameFromToken(accessToken)
        } else {
            btnLoginLogout.text = "Î°úÍ∑∏Ïù∏"
        }
    }

    // ‚úÖ JWT ÌÜ†ÌÅ∞ÏóêÏÑú username Ï∂îÏ∂ú
    private fun parseUsernameFromToken(token: String?): String {
        return try {
            val parts = token?.split(".")
            if (parts != null && parts.size >= 2) {
                val payload = String(Base64.decode(parts[1], Base64.URL_SAFE)) // ‚úÖ URL_SAFEÎ°ú ÏàòÏ†ï
                val jsonObject = JSONObject(payload)
                jsonObject.optString("username", "ÏÇ¨Ïö©Ïûê") // ‚úÖ username ÌååÏã±
            } else {
                "ÏÇ¨Ïö©Ïûê"
            }
        } catch (e: Exception) {
            e.printStackTrace()
            "ÏÇ¨Ïö©Ïûê"
        }
    }

    private fun applyGradientToText(textView: TextView) {
        val paint = textView.paint
        val width = paint.measureText(textView.text.toString())

        val shader = LinearGradient(
            0f, 0f, width, textView.textSize,
            intArrayOf(0xFF66FF99.toInt(), 0xFF228B22.toInt()), // Ïó∞ÎëêÏÉâ ‚Üí ÎÖπÏÉâ
            null,
            Shader.TileMode.CLAMP
        )
        textView.paint.shader = shader
    }

    private fun checkAndRequestLocationPermission() {
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
            getCurrentLocation()
        } else {
            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), LOCATION_PERMISSION_REQUEST_CODE)
        }
    }

    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == LOCATION_PERMISSION_REQUEST_CODE && grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
            getCurrentLocation()
        }
    }

    // ‚úÖ API Ìò∏Ï∂ú (Repository ÌÜµÌï¥ ÏöîÏ≤≠)
    private fun loadCoursesByLocation(area: String) {
        Log.d("MainActivity", "üöÄ API ÏöîÏ≤≠Ìï† ÏßÄÏó≠: $area")

        lifecycleScope.launch {
            val result = searchRepository.searchByLocation(area)
            result.onSuccess { searchResponse ->
                val courseList = searchResponse.take(5)
                Log.d("MainActivity", "üéØ Î∞õÏïÑÏò® ÏΩîÏä§ Îç∞Ïù¥ÌÑ∞: $courseList")

                // ‚úÖ Î∞õÏïÑÏò® Îç∞Ïù¥ÌÑ∞Î•º `setupViewPager`Ïóê ÎÑòÍ≤®Ï§å
                setupViewPager(courseList)

            }.onFailure { error ->
                Log.e("MainActivity", "‚ùå API ÏöîÏ≤≠ Ïã§Ìå®: ${error.message}")
            }
        }
    }

    @SuppressLint("MissingPermission")
    private fun getCurrentLocation() {
        fusedLocationClient.lastLocation.addOnSuccessListener { location: Location? ->
            location?.let {
                val geocoder = Geocoder(this, Locale.KOREAN)
                val address = geocoder.getFromLocation(it.latitude, it.longitude, 1)?.firstOrNull()
                val areaName = address?.subLocality ?: "Í∞ïÏÑúÍµ¨"
                tvLocation.text = areaName

                // ‚úÖ ÏúÑÏπò Í∏∞Î∞ò API ÏöîÏ≤≠ Ïã§Ìñâ
                loadCoursesByLocation(areaName)
            }
        }
    }

    companion object {
        private const val LOCATION_PERMISSION_REQUEST_CODE = 1001
    }

    private fun setupViewPager(courses: List<CourseData>) {
        val viewPager: ViewPager2 = findViewById(R.id.viewPager)

        // ‚úÖ `FragmentActivity`(`this`)ÏôÄ `courses`Îßå ÎÑòÍ≤®Ï£ºÎ©¥ Îê®
        val adapter = CoursePagerAdapter(this, courses.take(5))
        viewPager.adapter = adapter

        // ‚úÖ Ïù¥ÎØ∏ÏßÄ ÌÅ¥Î¶≠ Ïãú ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠
        adapter.setOnItemClickListener { course ->
            fetchCourseDetails(course.courseId)
        }
    }

    private fun fetchCourseDetails(courseId: Int) {
        Log.d("MainActivity", "Fetching details for courseId: $courseId")

        // ‚úÖ Retrofit Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± (API Ìò∏Ï∂ú)
        val courseApi = RetrofitInstance.CourseApi(this)

        lifecycleScope.launch {
            try {
                val response = courseApi.getCourseDetails(courseId) // ‚úÖ API Ìò∏Ï∂ú
                if (response.isSuccessful) {
                    val details = response.body()
                    if (details != null) {
                        Log.d("MainActivity", "‚úÖ Loaded Course Details: $details")

                        val pathPoints = details.path.map { PathPoint(it.latitude, it.longitude) }

                        // ‚úÖ `NaviActivity`Î°ú Ïù¥Îèô (Îç∞Ïù¥ÌÑ∞ Ï†ÑÎã¨)
                        val intent = Intent(this@MainActivity, NaviActivity::class.java).apply {
                            putParcelableArrayListExtra("path", ArrayList(pathPoints))
                            putExtra("startLocation", details.location)
                            putExtra("distance", details.distance)
                        }
                        startActivity(intent)
                        overridePendingTransition(0, 0) // ‚úÖ Ïï†ÎãàÎ©îÏù¥ÏÖò Ï†úÍ±∞
                    } else {
                        Log.e("MainActivity", "‚ùå Course details are null")
                    }
                } else {
                    Log.e("MainActivity", "‚ùå API ÏöîÏ≤≠ Ïã§Ìå®: ${response.code()}")
                }
            } catch (e: Exception) {
                Log.e("MainActivity", "‚ùå Error loading course details", e)
            }
        }
    }



}


